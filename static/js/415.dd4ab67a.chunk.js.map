{"version":3,"file":"static/js/415.dd4ab67a.chunk.js","mappings":"6LAGaA,EAAS,WAClB,OAAO,0BACH,SAAC,KAAD,CACNC,SAAS,EACTC,OAAO,KACPC,MAAM,KACNC,UAAU,cACVC,aAAc,CAAC,EACfC,aAAa,iBAEd,C,sHCXYC,EAAUC,EAAAA,EAAAA,IAAH,+CAIPC,EAAQD,EAAAA,EAAAA,GAAH,2FAMLE,EAAYF,EAAAA,EAAAA,GAAH,8GAOTG,EAAOH,EAAAA,EAAAA,GAAH,+OAYJI,EAAaJ,EAAAA,EAAAA,EAAH,sG,SC1BVK,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrBC,GAAWC,EAAAA,EAAAA,MACjB,OAAS,UAACT,EAAD,YAAS,SAACE,EAAD,qCAChB,SAACC,EAAD,UACGI,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,YAAd,OACV,SAACT,EAAD,WACE,UAAC,KAAD,CAASU,GAAE,kBAAaH,GAAMI,MAAO,CAAEC,KAAMR,GAA7C,WACE,gBAAKS,IAAKC,EAAAA,EAAeL,EAAaM,IAAI,WAC1C,SAACd,EAAD,UAAaO,QAHND,EADD,QAWjB,C,yHCMD,UArBa,WACX,OAA4BS,EAAAA,EAAAA,UAAS,IAArC,eAAOb,EAAP,KAAec,EAAf,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KAgBA,OAdAC,EAAAA,EAAAA,YAAU,YACR,iBAAC,oGAEGD,GAAa,GAFhB,UAGsBE,EAAAA,EAAAA,MAHtB,OAGSC,EAHT,OAIGL,EAAUK,GAJb,gDAMGC,QAAQC,IAAR,MANH,yBAQGL,GAAa,GARhB,2EAAD,EAWD,GAAE,KAEI,yBAAMD,GAAY,SAAC,IAAD,KAAa,SAAC,IAAD,CAAYf,OAAQA,KAC3D,C,mMCtBDsB,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAEHL,EAAmB,mCAAG,WAAOM,EAAMC,GAAb,uFACRH,EAAAA,EAAAA,IAAA,qCAAwCC,GAAWE,GAD3C,cACzBC,EADyB,yBAGxBA,EAASP,KAAKQ,SAHU,2CAAH,wDAMnBC,EAAgB,mCAAG,WAAOC,EAAOJ,GAAd,uFACLH,EAAAA,EAAAA,IAAA,+BAAkCC,EAAlC,iCAAkEM,EAAlE,+BAAsGJ,GADjG,cACtBC,EADsB,yBAGrBA,EAASP,KAAKQ,SAHO,2CAAH,wDAMhBG,EAAiB,mCAAG,WAAO1B,EAAIqB,GAAX,uFACNH,EAAAA,EAAAA,IAAA,gBAAmBlB,EAAnB,oBAAiCmB,EAAjC,mBAA2DE,GADrD,cACvBC,EADuB,yBAGtBA,EAASP,MAHa,2CAAH,wDAMjBY,EAAiB,mCAAG,WAAO3B,EAAIqB,GAAX,uFACNH,EAAAA,EAAAA,IAAA,gBAAmBlB,EAAnB,4BAAyCmB,EAAzC,mBAAmEE,GAD7D,cACvBC,EADuB,yBAGtBA,EAASP,KAAKa,MAHQ,2CAAH,wDAMjBC,EAAiB,mCAAG,WAAO7B,EAAIqB,GAAX,uFACNH,EAAAA,EAAAA,IAAA,gBAAmBlB,EAAnB,4BAAyCmB,EAAzC,0BAA0EE,GADpE,cACvBC,EADuB,yBAGtBA,EAASP,KAAKQ,SAHQ,2CAAH,uD,uDC7BvB,IAAMhB,EAAe,iC","sources":["components/Loader/Loader.jsx","components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","pages/Home.jsx","services/api.js","services/constants.js"],"sourcesContent":["import { Dna } from 'react-loader-spinner';\n\n\nexport const Loader = () => {\n    return <div>\n        <Dna\n  visible={true}\n  height=\"80\"\n  width=\"80\"\n  ariaLabel=\"dna-loading\"\n  wrapperStyle={{}}\n  wrapperClass=\"dna-wrapper\"\n/></div> \n}","import styled from '@emotion/styled';\n\nexport const Section = styled.div`\n  padding: 40px 20px;\n`;\n\nexport const Title = styled.h1`\n  font-size: 36px;\n  text-align: center;\n  margin-bottom: 40px;\n`;\n\nexport const ListMovie = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  justify-content: space-around;\n`;\n\nexport const Item = styled.li`\n  max-width: 350px;\n  border: 3px solid;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  :hover {\n    transform: scale(1.03);\n    cursor: zoom-in;\n  }\n`;\n\nexport const MovieTitle = styled.p`\n  font-size: 26px;\n  color: black;\n  text-align: center;\n  padding: 10px;\n`;\n","import { NavLink, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { BASE_IMG_URL } from 'services/constants';\nimport { ListMovie, Item, Title, Section, MovieTitle } from './MoviesList.styled';\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return ( <Section><Title>Trending movies today</Title>\n    <ListMovie>\n      {movies.map(({ id, title, poster_path }) => (\n        <Item key={id}>\n          <NavLink to={`/movies/${id}`} state={{ from: location }}>\n            <img src={BASE_IMG_URL + poster_path} alt=\"movie\" />\n            <MovieTitle>{title}</MovieTitle>\n          </NavLink>\n        </Item>\n      ))}\n    </ListMovie></Section>\n    \n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { fetchTrendingMovies } from 'services/api';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        setIsLoading(true);\n        const data = await fetchTrendingMovies();\n        setMovies(data);\n      } catch (err) {\n        console.log(err);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, []);\n\n  return <div>{isLoading ? <Loader /> : <MoviesList movies={movies} />}</div>;\n};\n\nexport default Home;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'bb60805928e986df13f7a98c4acc6577';\n\nexport const fetchTrendingMovies = async (page, options) => {\n    const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`, options);\n\n    return response.data.results;\n}\n\nexport const fetchSearchQuery = async (query, options) => {\n    const response = await axios.get(`search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`, options);\n\n    return response.data.results;\n}\n\nexport const fetchMovieDetails = async (id, options) => {\n    const response = await axios.get(`movie/${id}?api_key=${API_KEY}&language=en-US`, options);\n\n    return response.data;\n}\n\nexport const fetchMovieCredits = async (id, options) => {\n    const response = await axios.get(`movie/${id}/credits?api_key=${API_KEY}&language=en-US`, options);\n\n    return response.data.cast;\n}\n\nexport const fetchMovieReviews = async (id, options) => {\n    const response = await axios.get(`movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`, options);\n\n    return response.data.results;\n}","export const BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';"],"names":["Loader","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","Section","styled","Title","ListMovie","Item","MovieTitle","MoviesList","movies","location","useLocation","map","id","title","poster_path","to","state","from","src","BASE_IMG_URL","alt","useState","setMovies","isLoading","setIsLoading","useEffect","fetchTrendingMovies","data","console","log","axios","API_KEY","page","options","response","results","fetchSearchQuery","query","fetchMovieDetails","fetchMovieCredits","cast","fetchMovieReviews"],"sourceRoot":""}