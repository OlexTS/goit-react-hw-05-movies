{"version":3,"file":"static/js/129.2f39c06a.chunk.js","mappings":"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","sources":["components/Loader/Loader.jsx","components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","components/SearchMovies/SearchMovies.jsx","pages/Movies.jsx","services/api.js","services/constants.js"],"sourcesContent":["import { Dna } from 'react-loader-spinner';\n\n\nexport const Loader = () => {\n    return <div>\n        <Dna\n  visible={true}\n  height=\"80\"\n  width=\"80\"\n  ariaLabel=\"dna-loading\"\n  wrapperStyle={{}}\n  wrapperClass=\"dna-wrapper\"\n/></div> \n}","import styled from '@emotion/styled';\n\nexport const Section = styled.div`\n  padding: 40px 20px;\n`;\n\nexport const Title = styled.h1`\n  font-size: 36px;\n  text-align: center;\n  margin-bottom: 40px;\n`;\n\nexport const ListMovie = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  justify-content: space-around;\n`;\n\nexport const Item = styled.li`\n  max-width: 350px;\n  border: 3px solid;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  :hover {\n    transform: scale(1.03);\n    cursor: zoom-in;\n  }\n`;\n\nexport const MovieTitle = styled.p`\n  font-size: 26px;\n  color: black;\n  text-align: center;\n  padding: 10px;\n`;\n","import { NavLink, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { BASE_IMG_URL } from 'services/constants';\nimport { ListMovie, Item, Title, Section, MovieTitle } from './MoviesList.styled';\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return ( <Section><Title>Trending movies today</Title>\n    <ListMovie>\n      {movies.map(({ id, title, poster_path }) => (\n        <Item key={id}>\n          <NavLink to={`/movies/${id}`} state={{ from: location }}>\n            <img src={BASE_IMG_URL + poster_path} alt=\"movie\" />\n            <MovieTitle>{title}</MovieTitle>\n          </NavLink>\n        </Item>\n      ))}\n    </ListMovie></Section>\n    \n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { useState } from \"react\";\n\n\nexport const SearchMovies = ({ onSubmit }) => {\n    const [query, setQuery] = useState([]);\n    \n\n    const handleChange = (e) => {\n        setQuery(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        onSubmit(query)\n}\n    \n    return <div>\n        <form onSubmit={handleSubmit}>\n            <input type=\"text\" value={query} onChange={handleChange} autoComplete='off' placeholder=\"Please enter your query...\" autoFocus/>\n            <button type=\"submit\">Search</button>\n    </form></div>    \n}\n\nSearchMovies.propTypes = {\n    onSubmit: PropTypes.func.isRequired\n}","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchSearchQuery } from 'services/api';\nimport { SearchMovies } from 'components/SearchMovies/SearchMovies';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchQuery = searchParams.get('query');\n\n  useEffect(() => {\n     const controller = new AbortController();\n    if (!searchQuery) {\n      return;\n    }\n    \n    (async () => {\n      try {\n        const data = await fetchSearchQuery(searchQuery, {\n          signal: controller.signal,\n        });\n                setMovies(data);\n      } catch (err) {\n        console.log(err);\n      }\n    })();\n    return () => \n      controller.abort();\n  }, [searchQuery]);\n\n  const handleSearchMovies = query => {\n    setSearchParams({ query });\n  };\n  return (\n    <div>\n      <h1>Search Movies</h1>\n      <SearchMovies onSubmit={handleSearchMovies} />\n      {movies.length<1?<Loader/>: <MoviesList movies={movies} />}\n    </div>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'bb60805928e986df13f7a98c4acc6577';\n\nexport const fetchTrendingMovies = async (page, options) => {\n    const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`, options);\n\n    return response.data.results;\n}\n\nexport const fetchSearchQuery = async (query, options) => {\n    const response = await axios.get(`search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`, options);\n\n    return response.data.results;\n}\n\nexport const fetchMovieDetails = async (id, options) => {\n    const response = await axios.get(`movie/${id}?api_key=${API_KEY}&language=en-US`, options);\n\n    return response.data;\n}\n\nexport const fetchMovieCredits = async (id, options) => {\n    const response = await axios.get(`movie/${id}/credits?api_key=${API_KEY}&language=en-US`, options);\n\n    return response.data.cast;\n}\n\nexport const fetchMovieReviews = async (id, options) => {\n    const response = await axios.get(`movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`, options);\n\n    return response.data.results;\n}","export const BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';"],"names":["Loader","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","Section","styled","Title","ListMovie","Item","MovieTitle","MoviesList","movies","location","useLocation","map","id","title","poster_path","to","state","from","src","BASE_IMG_URL","alt","SearchMovies","onSubmit","useState","query","setQuery","e","preventDefault","type","value","onChange","target","autoComplete","placeholder","autoFocus","setMovies","useSearchParams","searchParams","setSearchParams","searchQuery","get","useEffect","controller","AbortController","fetchSearchQuery","signal","data","console","log","abort","length","axios","API_KEY","fetchTrendingMovies","page","options","response","results","fetchMovieDetails","fetchMovieCredits","cast","fetchMovieReviews"],"sourceRoot":""}